From 8c73c5099124b35694d263484d2c5685bddf32fa Mon Sep 17 00:00:00 2001
From: nadim365 <samnad14@gmail.com>
Date: Sat, 2 Jul 2022 19:52:51 -0400
Subject: [PATCH] Created Patch File

---
 .../datafeed/server3.py                       |  2 +-
 JPMC-tech-task-2-PY3-master/src/App.tsx       | 24 ++++++++++++++-----
 JPMC-tech-task-2-PY3-master/src/Graph.tsx     |  9 +++++--
 3 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/JPMC-tech-task-2-PY3-master/datafeed/server3.py b/JPMC-tech-task-2-PY3-master/datafeed/server3.py
index 1d59866..fb1c3a8 100644
--- a/JPMC-tech-task-2-PY3-master/datafeed/server3.py
+++ b/JPMC-tech-task-2-PY3-master/datafeed/server3.py
@@ -317,4 +317,4 @@ if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
         print ("No data found, generating...")
         generate_csv()
-    run(App())
+    run(App())
\ No newline at end of file
diff --git a/JPMC-tech-task-2-PY3-master/src/App.tsx b/JPMC-tech-task-2-PY3-master/src/App.tsx
index 0728518..149b1cf 100755
--- a/JPMC-tech-task-2-PY3-master/src/App.tsx
+++ b/JPMC-tech-task-2-PY3-master/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) =>{
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if(x > 1000){
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
diff --git a/JPMC-tech-task-2-PY3-master/src/Graph.tsx b/JPMC-tech-task-2-PY3-master/src/Graph.tsx
index ec1430e..8938afd 100644
--- a/JPMC-tech-task-2-PY3-master/src/Graph.tsx
+++ b/JPMC-tech-task-2-PY3-master/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -46,7 +46,12 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',
+       '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
       // Add more Perspective configurations here.
       elem.load(this.table);
     }
-- 
2.37.0

